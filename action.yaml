name: 'CloudFormation Parameters Reader'
description: 'Reads CloudFormation deployment parameters from JSON artifact'

inputs:
  artifact-path:
    description: 'Path to the deployment.json artifact'
    required: false
    default: './artifacts/deployment.json'

outputs:
  parameters:
    description: 'CloudFormation parameters in JSON format'
  stack-name:
    description: 'CloudFormation stack name'
  template-path:
    description: 'Path to CloudFormation template'
  cloudformation-tags:
    description: 'CloudFormation tags in JSON format'

runs:
  using: 'composite'
  steps:
    - name: Read CloudFormation Parameters
      shell: bash
      run: |
        echo "üîç Reading CloudFormation parameters from artifact file..."
        
        # Get the artifact path from input (with default)
        ARTIFACT_PATH="${{ inputs.artifact-path }}"
        echo "üìÇ Artifact path: $ARTIFACT_PATH"
        
        # Check if the artifact file exists
        if [ ! -f "$ARTIFACT_PATH" ]; then
          echo "‚ùå Error: Artifact file not found at path: $ARTIFACT_PATH"
          echo "üí° Please ensure the deployment.json file exists at the specified path"
          exit 1
        fi
        
        echo "‚úÖ Artifact file found, parsing JSON content..."
        
        # Extract parameters using jq (compact JSON format)
        PARAMETERS=$(jq -c '.parameters // {}' "$ARTIFACT_PATH")
        if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to parse parameters from JSON file"
          exit 1
        fi
        
        # Extract stack-name using jq
        STACK_NAME=$(jq -r '.["stack-name"] // ""' "$ARTIFACT_PATH")
        if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to parse stack-name from JSON file"
          exit 1
        fi
        
        # Extract template-path using jq
        TEMPLATE_PATH=$(jq -r '.["template-path"] // ""' "$ARTIFACT_PATH")
        if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to parse template-path from JSON file"
          exit 1
        fi
        
        # Extract tags using jq (compact JSON format)
        TAGS=$(jq -c '.tags // {}' "$ARTIFACT_PATH")
        if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to parse tags from JSON file"
          exit 1
        fi
        
        # Log the extracted values for debugging
        echo "üìã Extracted values:"
        echo "  Parameters: $PARAMETERS"
        echo "  Stack Name: $STACK_NAME"
        echo "  Template Path: $TEMPLATE_PATH"
        echo "  Tags: $TAGS"
        
        # Set GitHub Actions outputs
        echo "üîß Setting GitHub Actions outputs..."
        echo "parameters=$PARAMETERS" >> $GITHUB_OUTPUT
        echo "stack-name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "template-path=$TEMPLATE_PATH" >> $GITHUB_OUTPUT
        echo "cloudformation-tags=$TAGS" >> $GITHUB_OUTPUT
        
        # Set environment variables
        echo "üåç Setting environment variables..."
        
        # Set DEPLOYMENT_PARAMETERS as multiline environment variable
        echo "DEPLOYMENT_PARAMETERS<<EOF" >> $GITHUB_ENV
        echo "$PARAMETERS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Set DEPLOYMENT_STACK_NAME as single-line environment variable
        echo "DEPLOYMENT_STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
        
        # Set DEPLOYMENT_TEMPLATE_PATH as single-line environment variable
        echo "DEPLOYMENT_TEMPLATE_PATH=$TEMPLATE_PATH" >> $GITHUB_ENV
        
        # Set DEPLOYMENT_TAGS as multiline environment variable
        echo "DEPLOYMENT_TAGS<<EOF" >> $GITHUB_ENV
        echo "$TAGS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "‚úÖ Successfully extracted CloudFormation parameters, set outputs, and configured environment variables"
